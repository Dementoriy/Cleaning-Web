// <auto-generated />
using System;
using CleaningDLL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CleaningDLL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220422185548_fixAddress")]
    partial class fixAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CleaningDLL.Entity.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Apartment_Number")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Building")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Brigade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SmenaNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ID");

                    b.ToTable("Brigade");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            SmenaNumber = "Смена1"
                        },
                        new
                        {
                            ID = 2,
                            SmenaNumber = "Смена2"
                        });
                });

            modelBuilder.Entity("CleaningDLL.Entity.BrigadeInventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BrigadeID")
                        .HasColumnType("integer");

                    b.Property<int?>("InventoryID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BrigadeID");

                    b.HasIndex("InventoryID");

                    b.ToTable("BrigadeInventory");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsOldClient")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Client");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ClientAddresses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ClientID");

                    b.ToTable("ClientAddresses");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Consumable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ConsumableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("ReferenceUnitsOfMeasurementID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConsumableName")
                        .IsUnique();

                    b.HasIndex("ReferenceUnitsOfMeasurementID");

                    b.ToTable("Consumable");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ConsumablesService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConsumptionRateID")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConsumptionRateID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ConsumablesService");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ConsumptionRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConsumableID")
                        .HasColumnType("integer");

                    b.Property<string>("Consumption")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("ReferenceUnitsOfMeasurementID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConsumableID");

                    b.HasIndex("ReferenceUnitsOfMeasurementID");

                    b.ToTable("ConsumptionRate");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ClientID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfContract")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ClientID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DeliveryContentID")
                        .HasColumnType("integer");

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ProviderID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryContentID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("CleaningDLL.Entity.DeliveryContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ConsumableID")
                        .HasColumnType("integer");

                    b.Property<int>("DeliveryContentAmount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConsumableID");

                    b.ToTable("DeliveryContent");
                });

            modelBuilder.Entity("CleaningDLL.Entity.DeliveryContract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DeliveryContractDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProviderID")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseRequisitionID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("PurchaseRequisitionID");

                    b.ToTable("DeliveryContract");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BrigadeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Login")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PassportData")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionID")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("BrigadeID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("PassportData")
                        .IsUnique();

                    b.HasIndex("Password")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("PositionID");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EmploymentDate = new DateTime(2021, 11, 30, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Login = "admin",
                            MiddleName = "Михайлович",
                            Name = "Дмитрий",
                            PassportData = "1111222222",
                            Password = "a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3",
                            PhoneNumber = "+79536773183",
                            PositionID = 1,
                            Surname = "Ведерников"
                        },
                        new
                        {
                            ID = 2,
                            BrigadeID = 1,
                            EmploymentDate = new DateTime(2021, 11, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "brigadir1",
                            MiddleName = "Анатольевич",
                            Name = "Иван",
                            PassportData = "1111333333",
                            Password = "03ac674216f3e15c761ee1a5e255f067953623c8b388b4459e13f978d7c846f4",
                            PhoneNumber = "+79536856008",
                            PositionID = 2,
                            Surname = "Бессонов"
                        },
                        new
                        {
                            ID = 3,
                            BrigadeID = 2,
                            EmploymentDate = new DateTime(2021, 11, 30, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Login = "brigadir2",
                            MiddleName = "Николаевич",
                            Name = "Александр",
                            PassportData = "1111444444",
                            Password = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            PhoneNumber = "+79123646993",
                            PositionID = 2,
                            Surname = "Заболотский"
                        },
                        new
                        {
                            ID = 4,
                            BrigadeID = 1,
                            EmploymentDate = new DateTime(2021, 12, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "Игоревич",
                            Name = "Дмитрий",
                            PassportData = "1111555555",
                            PhoneNumber = "+79536952565",
                            PositionID = 3,
                            Surname = "Москалев"
                        },
                        new
                        {
                            ID = 5,
                            BrigadeID = 1,
                            EmploymentDate = new DateTime(2021, 12, 1, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "Владимирович",
                            Name = "Роман",
                            PassportData = "1111666666",
                            PhoneNumber = "+79091324445",
                            PositionID = 3,
                            Surname = "Суслов"
                        },
                        new
                        {
                            ID = 6,
                            BrigadeID = 2,
                            EmploymentDate = new DateTime(2021, 12, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "Игоревич",
                            Name = "Максим",
                            PassportData = "1111777777",
                            PhoneNumber = "+79123644673",
                            PositionID = 3,
                            Surname = "Орлов"
                        },
                        new
                        {
                            ID = 7,
                            BrigadeID = 2,
                            EmploymentDate = new DateTime(2021, 12, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            MiddleName = "Константинович",
                            Name = "Дмитрий",
                            PassportData = "1111888888",
                            PhoneNumber = "+79229357609",
                            PositionID = 3,
                            Surname = "Целищев"
                        });
                });

            modelBuilder.Entity("CleaningDLL.Entity.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfReceiving")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("InventoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("InventoryTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("LifeTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UseTime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.HasIndex("InventoryTypeID");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("CleaningDLL.Entity.InventoryType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("ID");

                    b.ToTable("InventoryType");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Пылесос"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Стеклоочиститель"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Вакуумный очиститель"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Дезинфектор"
                        });
                });

            modelBuilder.Entity("CleaningDLL.Entity.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("ApproximateTime")
                        .HasColumnType("integer");

                    b.Property<int>("BrigadeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientID")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("ContractID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("BrigadeID");

                    b.HasIndex("ClientID");

                    b.HasIndex("ContractID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NamePosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Обрабатывать заявки",
                            NamePosition = "Администратор"
                        },
                        new
                        {
                            ID = 2,
                            Description = "Главный клинер. Заведует бригадой",
                            NamePosition = "Бригадир"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Совершать уборку на объекте",
                            NamePosition = "Клинер"
                        });
                });

            modelBuilder.Entity("CleaningDLL.Entity.ProvidedService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("OrderID")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ProvidedService");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Provider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressID")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProviderTelefonNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.HasIndex("ProviderTelefonNumber")
                        .IsUnique();

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("CleaningDLL.Entity.PurchaseRequisition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProviderID")
                        .HasColumnType("integer");

                    b.Property<int>("RequisitionContentID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ProviderID");

                    b.HasIndex("RequisitionContentID");

                    b.ToTable("PurchaseRequisition");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ReferenceUnitsOfMeasurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("ID");

                    b.HasIndex("Unit")
                        .IsUnique();

                    b.ToTable("ReferenceUnitsOfMeasurement");
                });

            modelBuilder.Entity("CleaningDLL.Entity.RequisitionContent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int?>("ConsumableID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConsumableID");

                    b.ToTable("RequisitionContent");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InventoryTypeID")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("InventoryTypeID");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Поддерживающая уборка. Объект должен быть в незапущенном состоянии. Цена за 1м2.",
                            InventoryTypeID = 1,
                            Price = 40m,
                            ServiceName = "Экспресс уборка",
                            Time = 100
                        },
                        new
                        {
                            ID = 2,
                            Description = "Генеральная уборка. Цена за 1м2.",
                            InventoryTypeID = 1,
                            Price = 70m,
                            ServiceName = "Генеральная уборка",
                            Time = 220
                        },
                        new
                        {
                            ID = 3,
                            Description = "Уборка на объекте после ремонта/стройки (Обильное загрязнение). Цена за 1м2.",
                            InventoryTypeID = 1,
                            Price = 80m,
                            ServiceName = "Послестроительная уборка",
                            Time = 220
                        },
                        new
                        {
                            ID = 4,
                            Description = "Уборка офисных помещений. Цена за 1м2.",
                            InventoryTypeID = 1,
                            Price = 50m,
                            ServiceName = "Уборка офисов",
                            Time = 100
                        },
                        new
                        {
                            ID = 5,
                            Description = "Мойка окон. Цена за 1 створу.",
                            InventoryTypeID = 2,
                            Price = 250m,
                            ServiceName = "Мойка окон",
                            Time = 60
                        },
                        new
                        {
                            ID = 6,
                            Description = "Мойка стеклянных дверей балконов и лоджий. Цена за 1 дверь.",
                            InventoryTypeID = 2,
                            Price = 500m,
                            ServiceName = "Мойка стеклянных дверей",
                            Time = 120
                        },
                        new
                        {
                            ID = 7,
                            Description = "Химчистка диванов. Мягкой мебели. Цена за 1 место.",
                            InventoryTypeID = 3,
                            Price = 300m,
                            ServiceName = "Химчистка диванов",
                            Time = 3600
                        },
                        new
                        {
                            ID = 8,
                            Description = "Химчистка кресел. Мягкой мебели. Цена за 1 кресло.",
                            InventoryTypeID = 3,
                            Price = 300m,
                            ServiceName = "Химчистка кресел",
                            Time = 3600
                        },
                        new
                        {
                            ID = 9,
                            Description = "Химчистка ковров, матрасов. Цена за 1м2.",
                            InventoryTypeID = 3,
                            Price = 150m,
                            ServiceName = "Химчистка ковров",
                            Time = 300
                        },
                        new
                        {
                            ID = 10,
                            Description = "Дезинфекция помещений, твердых поверхносте, воздуха. Цена за 1м2.",
                            InventoryTypeID = 4,
                            Price = 40m,
                            ServiceName = "Дезинфекция",
                            Time = 30
                        });
                });

            modelBuilder.Entity("CleaningDLL.Entity.BrigadeInventory", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Brigade", "Brigade")
                        .WithMany()
                        .HasForeignKey("BrigadeID");

                    b.HasOne("CleaningDLL.Entity.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryID");

                    b.Navigation("Brigade");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ClientAddresses", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("CleaningDLL.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.Navigation("Address");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Consumable", b =>
                {
                    b.HasOne("CleaningDLL.Entity.ReferenceUnitsOfMeasurement", "ReferenceUnitsOfMeasurement")
                        .WithMany()
                        .HasForeignKey("ReferenceUnitsOfMeasurementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferenceUnitsOfMeasurement");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ConsumablesService", b =>
                {
                    b.HasOne("CleaningDLL.Entity.ConsumptionRate", "ConsumptionRate")
                        .WithMany()
                        .HasForeignKey("ConsumptionRateID");

                    b.HasOne("CleaningDLL.Entity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID");

                    b.Navigation("ConsumptionRate");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ConsumptionRate", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableID");

                    b.HasOne("CleaningDLL.Entity.ReferenceUnitsOfMeasurement", "ReferenceUnitsOfMeasurement")
                        .WithMany()
                        .HasForeignKey("ReferenceUnitsOfMeasurementID");

                    b.Navigation("Consumable");

                    b.Navigation("ReferenceUnitsOfMeasurement");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Contract", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("CleaningDLL.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Delivery", b =>
                {
                    b.HasOne("CleaningDLL.Entity.DeliveryContent", "DeliveryContent")
                        .WithMany()
                        .HasForeignKey("DeliveryContentID");

                    b.HasOne("CleaningDLL.Entity.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");

                    b.Navigation("DeliveryContent");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("CleaningDLL.Entity.DeliveryContent", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableID");

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("CleaningDLL.Entity.DeliveryContract", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("CleaningDLL.Entity.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");

                    b.HasOne("CleaningDLL.Entity.PurchaseRequisition", "PurchaseRequisition")
                        .WithMany()
                        .HasForeignKey("PurchaseRequisitionID");

                    b.Navigation("Employee");

                    b.Navigation("Provider");

                    b.Navigation("PurchaseRequisition");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Employee", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Brigade", "Brigade")
                        .WithMany()
                        .HasForeignKey("BrigadeID");

                    b.HasOne("CleaningDLL.Entity.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Inventory", b =>
                {
                    b.HasOne("CleaningDLL.Entity.InventoryType", "InventoryType")
                        .WithMany()
                        .HasForeignKey("InventoryTypeID");

                    b.Navigation("InventoryType");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Order", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("CleaningDLL.Entity.Brigade", "Brigade")
                        .WithMany()
                        .HasForeignKey("BrigadeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningDLL.Entity.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("CleaningDLL.Entity.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningDLL.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Address");

                    b.Navigation("Brigade");

                    b.Navigation("Client");

                    b.Navigation("Contract");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("CleaningDLL.Entity.ProvidedService", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleaningDLL.Entity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Provider", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CleaningDLL.Entity.PurchaseRequisition", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("CleaningDLL.Entity.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");

                    b.HasOne("CleaningDLL.Entity.RequisitionContent", "RequisitionContent")
                        .WithMany()
                        .HasForeignKey("RequisitionContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Provider");

                    b.Navigation("RequisitionContent");
                });

            modelBuilder.Entity("CleaningDLL.Entity.RequisitionContent", b =>
                {
                    b.HasOne("CleaningDLL.Entity.Consumable", "Consumable")
                        .WithMany()
                        .HasForeignKey("ConsumableID");

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Service", b =>
                {
                    b.HasOne("CleaningDLL.Entity.InventoryType", "InventoryType")
                        .WithMany()
                        .HasForeignKey("InventoryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryType");
                });

            modelBuilder.Entity("CleaningDLL.Entity.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
